plugins {
    id 'java-library'
    id 'maven-publish'
    id 'info.solidsoft.pitest' version '1.15.0'
}

allprojects {
    group = 'org.jmonadic'
    version = '1.0.0'
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'info.solidsoft.pitest'
    apply plugin: 'jacoco'
    
    java.sourceCompatibility = JavaVersion.VERSION_21
    
    compileJava {
        options.compilerArgs += [
            '--enable-preview',
            '-Xlint:unchecked',
            '-Xlint:deprecation'
        ]
    }
    
    compileTestJava {
        options.compilerArgs += [
            '--enable-preview'
        ]
    }
    
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
        testImplementation 'org.assertj:assertj-core:3.24.2'
        testImplementation 'org.mockito:mockito-core:5.7.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.7.0'
        testImplementation 'org.awaitility:awaitility:4.2.0'
        testImplementation 'net.jqwik:jqwik:1.8.2'
        pitest 'org.pitest:pitest-junit5-plugin:1.2.0'
    }
    
    test {
        useJUnitPlatform()
        jvmArgs = ['--enable-preview']
        maxHeapSize = '1g'
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = false
        }
        finalizedBy 'jacocoTestReport'
    }
    
    // Mutation testing configuration
    pitest {
        targetClasses = ['org.jmonadic.*']
        targetTests = ['org.jmonadic.*']
        pitestVersion = '1.15.3'
        mutators = ['STRONGER']
        outputFormats = ['XML', 'HTML']
        timestampedReports = false
        mutationThreshold = 80
        coverageThreshold = 85
        threads = 2
        verbose = false
        excludedClasses = [
            '*Test*',
            '*Application*',
            '*Config*',
            '*Example*'
        ]
        avoidCallsTo = [
            'java.util.logging',
            'org.slf4j',
            'org.apache.log4j',
            'java.lang.System'
        ]
        features = ['+FLOGCALL', '+FINFINC']
    }
    
    // JaCoCo configuration
    jacoco {
        toolVersion = '0.8.11'
    }
    
    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            html.required = true
            csv.required = false
        }
        executionData fileTree(dir: project.buildDir.absolutePath, include: "**/*.exec")
    }
    
    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                limit {
                    minimum = 0.80
                }
            }
            rule {
                element = 'CLASS'
                excludes = [
                    '*.Application*',
                    '*.Config*',
                    '*.Example*',
                    '*.Test*'
                ]
                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.75
                }
            }
        }
    }
    
    // Library publication configuration
    java {
        withSourcesJar()
        withJavadocJar()
    }
    
    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                
                pom {
                    name = project.name
                    description = project.description ?: 'Functional Programming Monads for Java'
                    url = 'https://github.com/your-org/jmonadic'
                    
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    
                    developers {
                        developer {
                            id = 'maintainer'
                            name = 'JMonadic Team'
                            email = 'maintainer@example.com'
                        }
                    }
                }
            }
        }
    }
}

// Task to publish all modules to Maven local
task publishAllToMavenLocal {
    dependsOn subprojects.collect { ":${it.name}:publishToMavenLocal" }
    description = 'Publishes all modules to Maven local repository'
}